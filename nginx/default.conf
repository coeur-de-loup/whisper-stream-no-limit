server {
    listen 80;
    # Accept requests for any host, including your custom domain
    server_name localhost wwsoc04s0coo44ckw4g80wkw.artia.ca;

    # Increase max upload size to allow larger audio files (set to 1GB)
    client_max_body_size 1000M;
    
    # Add server info and hide version
    server_tokens off;
    
    # Proper MIME type handling
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Improve buffer settings for large file uploads
    client_body_buffer_size 128k;
    client_body_timeout 300s;
    
    # Basic security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Health check endpoint to verify nginx is running
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }

    # Explicitly serve CSS files with correct mime type
    location ~* \.css$ {
        root /usr/share/nginx/html;
        add_header Content-Type text/css;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000";
        try_files $uri =404;
    }

    # Serve static files from the public directory
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    # Proxy API requests to the whisper service
    location /api/ {
        # Directly use the container name
        proxy_pass http://a0s0wo40cscgkk8so040o800.artia.ca:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Forward the API key header if present
        proxy_set_header X-API-Key $http_x_api_key;
        
        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-API-Key' always;
        
        # Handle OPTIONS requests for CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-API-Key';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # Enable WebSockets for SSE (Server-Sent Events)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Increase timeouts for large file processing
        proxy_read_timeout 600s;
        proxy_connect_timeout 90s;
        proxy_send_timeout 600s;
        
        # Buffer settings for large requests
        proxy_buffer_size 16k;
        proxy_buffers 32 16k;
        proxy_busy_buffers_size 64k;
        
        # Set larger header buffers to handle larger cookies and headers
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        # Add debug headers to responses
        add_header X-Debug-Upstream-Status $upstream_status always;
        add_header X-Debug-Upstream-Response-Time $upstream_response_time always;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 419 =200 /api_error_419.json;
    }
    
    # Provide a meaningful response for 419 errors
    location = /api_error_419.json {
        add_header Content-Type application/json;
        return 200 '{"error": "Session expired or CSRF token mismatch. Please refresh the page and try again."}';
    }
} 